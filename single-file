apiVersion: v1

kind: Secret
metadata:
  name: k8s-monitor-secrets
type: Opaque
stringData:
  INFLUXDB_URL: http://136.159.209.214:8086
  INFLUXDB_TOKEN: ugGSgOcXm2l3X2rxGdFdUodXIMPDi1s-44Qpp_li2KRnNckcM2n_rSlbCDfFb2DLS7FLUHnIyz5nn-RJDRuWbA==
  INFLUXDB_ORG: uofc
  INFLUXDB_BUCKET: teastore

---
apiVersion: v1

kind: ConfigMap
metadata:
  name: k8s-monitor-config
data:
  telegraf.conf: |+
    # Telegraf Configuration

    # Global tags can be specified here in key="value" format.
    [global_tags]
      
    # Configuration for telegraf agent
    [agent]
      interval = "10s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      debug = true
      hostname = ""
      omit_hostname = false


    ###############################################################################
    #                            OUTPUT PLUGINS                                   #
    ###############################################################################

    # Configuration for sending metrics to InfluxDB
    [[outputs.influxdb_v2]]
      urls = ["${INFLUXDB_URL}"]
      token = "${INFLUXDB_TOKEN}"
      organization = "${INFLUXDB_ORG}"
      bucket = "${INFLUXDB_BUCKET}"
      ## Optional TLS Config for use on HTTP connections.
      # tls_ca = "/etc/telegraf/ca.pem"
      # tls_cert = "/etc/telegraf/cert.pem"
      # tls_key = "/etc/telegraf/key.pem"
      ## Use TLS but skip chain & host verification
      # insecure_skip_verify = false

    ###############################################################################
    #                            INPUT PLUGINS                                    #
    ###############################################################################

    # Read metrics from the Kubernetes api
    [[inputs.kube_inventory]]
      ## URL for the Kubernetes API
      url = "https://${KUBERNETES_SERVICE_HOST}"
      # namespace = "default"

      ## Use bearer token for authorization. ('bearer_token' takes priority)
      ## If both of these are empty, we'll use the default serviceaccount:
      ## at: /run/secrets/kubernetes.io/serviceaccount/token
      # bearer_token = "/path/to/bearer/token"
      ## OR
      # bearer_token_string = "${K8S_TOKEN}"

      ## Set response_timeout (default 5 seconds)
      # response_timeout = "5s"

      ## Optional Resources to exclude from gathering
      ## Leave them with blank with try to gather everything available.
      ## Values can be - "daemonsets", deployments", "endpoints", "ingress", "nodes",
      ## "persistentvolumes", "persistentvolumeclaims", "pods", "services", "statefulsets"
      # resource_exclude = [ "deployments", "nodes", "statefulsets" ]

      ## Optional Resources to include when gathering
      ## Overrides resource_exclude if both set.
      # resource_include = [ "deployments", "nodes", "statefulsets" ]

      ## selectors to include and exclude as tags.  Globs accepted.
      ## Note that an empty array for both will include all selectors as tags
      ## selector_exclude overrides selector_include if both set.
      # selector_include = []
      # selector_exclude = ["*"]

      ## Optional TLS Config
      # tls_ca = "/path/to/cafile"
      # tls_cert = "/path/to/certfile"
      # tls_key = "/path/to/keyfile"
      ## Use TLS but skip chain & host verification
      insecure_skip_verify = true

    # Run executable as long-running input plugin
    [[inputs.execd]]
      ## Program to run as daemon
      command = ["/report-metrics.out"]
      signal = "none"
      ## Delay before the process is restarted after an unexpected termination
      restart_delay = "10s"
      ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
      data_format = "influx"

    [[outputs.file]]
      files = ["stdout"]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-monitor-deployment
spec:
  selector:
    matchLabels:
      app: k8s-monitor
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: k8s-monitor
    spec:
      containers:
        - image: vahidmostofi/telegraf-metrics-reporter:latest
          name: telegraf
          volumeMounts:
            - mountPath: /etc/telegraf/telegraf.conf
              name: k8s-monitor-config
              subPath: telegraf.conf
              readOnly: true
          envFrom:
            - secretRef:
                name: k8s-monitor-secrets
      volumes:
        - name: k8s-monitor-config
          configMap:
            name: k8s-monitor-config
---
apiVersion: v1

kind: ConfigMap
metadata:
  name: k8s-monitor-config
data:
  telegraf.conf: |+
    # Telegraf Configuration

    # Global tags can be specified here in key="value" format.
    [global_tags]
      
    # Configuration for telegraf agent
    [agent]
      interval = "10s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      debug = true
      hostname = ""
      omit_hostname = false


    ###############################################################################
    #                            OUTPUT PLUGINS                                   #
    ###############################################################################

    # Configuration for sending metrics to InfluxDB
    [[outputs.influxdb_v2]]
      urls = ["${INFLUXDB_URL}"]
      token = "${INFLUXDB_TOKEN}"
      organization = "${INFLUXDB_ORG}"
      bucket = "${INFLUXDB_BUCKET}"
      ## Optional TLS Config for use on HTTP connections.
      # tls_ca = "/etc/telegraf/ca.pem"
      # tls_cert = "/etc/telegraf/cert.pem"
      # tls_key = "/etc/telegraf/key.pem"
      ## Use TLS but skip chain & host verification
      # insecure_skip_verify = false

    ###############################################################################
    #                            INPUT PLUGINS                                    #
    ###############################################################################

    # Read metrics from the Kubernetes api
    [[inputs.kube_inventory]]
      ## URL for the Kubernetes API
      url = "https://${KUBERNETES_SERVICE_HOST}"
      # namespace = "default"

      ## Use bearer token for authorization. ('bearer_token' takes priority)
      ## If both of these are empty, we'll use the default serviceaccount:
      ## at: /run/secrets/kubernetes.io/serviceaccount/token
      # bearer_token = "/path/to/bearer/token"
      ## OR
      # bearer_token_string = "${K8S_TOKEN}"

      ## Set response_timeout (default 5 seconds)
      # response_timeout = "5s"

      ## Optional Resources to exclude from gathering
      ## Leave them with blank with try to gather everything available.
      ## Values can be - "daemonsets", deployments", "endpoints", "ingress", "nodes",
      ## "persistentvolumes", "persistentvolumeclaims", "pods", "services", "statefulsets"
      # resource_exclude = [ "deployments", "nodes", "statefulsets" ]

      ## Optional Resources to include when gathering
      ## Overrides resource_exclude if both set.
      # resource_include = [ "deployments", "nodes", "statefulsets" ]

      ## selectors to include and exclude as tags.  Globs accepted.
      ## Note that an empty array for both will include all selectors as tags
      ## selector_exclude overrides selector_include if both set.
      # selector_include = []
      # selector_exclude = ["*"]

      ## Optional TLS Config
      # tls_ca = "/path/to/cafile"
      # tls_cert = "/path/to/certfile"
      # tls_key = "/path/to/keyfile"
      ## Use TLS but skip chain & host verification
      insecure_skip_verify = true

    # Run executable as long-running input plugin
    [[inputs.execd]]
      ## Program to run as daemon
      command = ["/report-metrics.out"]
      signal = "none"
      ## Delay before the process is restarted after an unexpected termination
      restart_delay = "10s"
      ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
      data_format = "influx"

    [[outputs.file]]
      files = ["stdout"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: monitorer
automountServiceAccountToken: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-monitor-deployment
spec:
  selector:
    matchLabels:
      app: k8s-monitor
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: k8s-monitor
    spec:
      serviceAccountName: monitorer
      automountServiceAccountToken: true
      containers:
        - image: vahidmostofi/telegraf-metrics-reporter:latest
          name: telegraf
          volumeMounts:
            - mountPath: /etc/telegraf/telegraf.conf
              name: k8s-monitor-config
              subPath: telegraf.conf
              readOnly: true
          envFrom:
            - secretRef:
                name: k8s-monitor-secrets
      volumes:
        - name: k8s-monitor-config
          configMap:
            name: k8s-monitor-config
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: influx:telegraf:viewer
  labels:
    rbac.authorization.k8s.io/aggregate-view-telegraf: "true"
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes", "nodes"]
    verbs: ["get", "list"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: influx:telegraf
aggregationRule:
  clusterRoleSelectors:
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-view-telegraf: "true"
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-to-view: "true"
rules: [] # Rules are automatically filled in by the controller manager.
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: influx:telegraf:viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: influx:telegraf
subjects:
  - kind: ServiceAccount
    name: monitorer
    namespace: default
